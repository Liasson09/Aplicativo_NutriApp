-- Trigger para INSERT y UPDATE
CREATE OR REPLACE TRIGGER T03IU_NUTRICIONISTA
BEFORE INSERT OR UPDATE ON Nutricionista
FOR EACH ROW
BEGIN
IF INSERTING THEN
:new.UsuCreacion := USER;
:new.FecCreacion := SYSDATE;
:new.UsuModificacion := USER;
:new.FecModificacion := SYSDATE;
END IF;
:new.UsuModificacion := USER;
:new.FecModificacion := SYSDATE;
END;
/
CREATE OR REPLACE TRIGGER T03IU_USUARIO
BEFORE INSERT OR UPDATE ON Usuario
FOR EACH ROW
BEGIN
IF INSERTING THEN
:new.UsuCreacion := USER;
:new.FecCreacion := SYSDATE;
:new.UsuModificacion := USER;
:new.FecModificacion := SYSDATE;
END IF;
:new.UsuModificacion := USER;
:new.FecModificacion := SYSDATE;
END;
/
-- FUNCTION: Calcular la calificación del nutricionista
CREATE OR REPLACE FUNCTION calculate_avg_calificacion(nutricionista_id NUMBER)
RETURN NUMBER
IS
    total_calificacion NUMBER := 0;
    num_calificacion NUMBER := 0;
    avg_calificacion NUMBER;
BEGIN
    SELECT SUM(calificacion) INTO total_rating
    FROM calificacion
    WHERE nutricionista_id_nutricionista = nutricionista_id;

    SELECT COUNT(*) INTO num_ratings
    FROM calificacion
    WHERE nutricionista_id_nutricionista = nutricionista_id;

    IF num_ratings > 0 THEN
        avg_calificacion := total_calificacion / num_calificacion;
        RETURN avg_calificacion;
    ELSE
        RETURN 0; -- No ratings yet
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 0; -- Nutricionista not found or has no ratings
    WHEN OTHERS THEN
        RETURN -1; -- Some error occurred
END;
/

-- PROCEDURE: Actualizar el número de teléfono del usuario
CREATE OR REPLACE PROCEDURE update_user_phone(id_user NUMBER, new_phone VARCHAR2)
IS
BEGIN
    UPDATE usuarios
    SET telefono = new_phone
    WHERE id_usuarios = id_user;
    COMMIT;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('User not found.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/